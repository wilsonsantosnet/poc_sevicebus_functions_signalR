{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\projetos\\\\gerador-project-all-solution\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createForOfIteratorHelper.js\";\nimport _objectSpread from \"C:\\\\projetos\\\\gerador-project-all-solution\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\objectSpread2.js\";\nimport _slicedToArray from \"C:\\\\projetos\\\\gerador-project-all-solution\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";\nimport _asyncToGenerator from \"C:\\\\projetos\\\\gerador-project-all-solution\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport _classCallCheck from \"C:\\\\projetos\\\\gerador-project-all-solution\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\projetos\\\\gerador-project-all-solution\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _regeneratorRuntime from \"C:\\\\projetos\\\\gerador-project-all-solution\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { DefaultHttpClient } from \"./DefaultHttpClient\";\nimport { AggregateErrors, DisabledTransportError, FailedToNegotiateWithServerError, FailedToStartTransportError, HttpError, UnsupportedTransportError } from \"./Errors\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport { LogLevel } from \"./ILogger\";\nimport { HttpTransportType, TransferFormat } from \"./ITransport\";\nimport { LongPollingTransport } from \"./LongPollingTransport\";\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\nimport { Arg, createLogger, getUserAgentHeader, Platform } from \"./Utils\";\nimport { WebSocketTransport } from \"./WebSocketTransport\";\nvar MAX_REDIRECTS = 100;\n/** @private */\n\nexport var HttpConnection = /*#__PURE__*/function () {\n  function HttpConnection(url) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, HttpConnection);\n\n    this._stopPromiseResolver = function () {};\n\n    this.features = {};\n    this._negotiateVersion = 1;\n    Arg.isRequired(url, \"url\");\n    this._logger = createLogger(options.logger);\n    this.baseUrl = this._resolveUrl(url);\n    options = options || {};\n    options.logMessageContent = options.logMessageContent === undefined ? false : options.logMessageContent;\n\n    if (typeof options.withCredentials === \"boolean\" || options.withCredentials === undefined) {\n      options.withCredentials = options.withCredentials === undefined ? true : options.withCredentials;\n    } else {\n      throw new Error(\"withCredentials option was not a 'boolean' or 'undefined' value\");\n    }\n\n    options.timeout = options.timeout === undefined ? 100 * 1000 : options.timeout;\n    var webSocketModule = null;\n    var eventSourceModule = null;\n\n    if (Platform.isNode && typeof require !== \"undefined\") {\n      // In order to ignore the dynamic require in webpack builds we need to do this magic\n      // @ts-ignore: TS doesn't know about these names\n      var requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\n      webSocketModule = requireFunc(\"ws\");\n      eventSourceModule = requireFunc(\"eventsource\");\n    }\n\n    if (!Platform.isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\n      options.WebSocket = WebSocket;\n    } else if (Platform.isNode && !options.WebSocket) {\n      if (webSocketModule) {\n        options.WebSocket = webSocketModule;\n      }\n    }\n\n    if (!Platform.isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\n      options.EventSource = EventSource;\n    } else if (Platform.isNode && !options.EventSource) {\n      if (typeof eventSourceModule !== \"undefined\") {\n        options.EventSource = eventSourceModule;\n      }\n    }\n\n    this._httpClient = options.httpClient || new DefaultHttpClient(this._logger);\n    this._connectionState = \"Disconnected\"\n    /* Disconnected */\n    ;\n    this._connectionStarted = false;\n    this._options = options;\n    this.onreceive = null;\n    this.onclose = null;\n  }\n\n  _createClass(HttpConnection, [{\n    key: \"start\",\n    value: function () {\n      var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(transferFormat) {\n        var message, _message;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                transferFormat = transferFormat || TransferFormat.Binary;\n                Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n\n                this._logger.log(LogLevel.Debug, \"Starting connection with transfer format '\".concat(TransferFormat[transferFormat], \"'.\"));\n\n                if (!(this._connectionState !== \"Disconnected\"\n                /* Disconnected */\n                )) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", Promise.reject(new Error(\"Cannot start an HttpConnection that is not in the 'Disconnected' state.\")));\n\n              case 5:\n                this._connectionState = \"Connecting\"\n                /* Connecting */\n                ;\n                this._startInternalPromise = this._startInternal(transferFormat);\n                _context.next = 9;\n                return this._startInternalPromise;\n\n              case 9:\n                if (!(this._connectionState === \"Disconnecting\"\n                /* Disconnecting */\n                )) {\n                  _context.next = 17;\n                  break;\n                }\n\n                // stop() was called and transitioned the client into the Disconnecting state.\n                message = \"Failed to start the HttpConnection before stop() was called.\";\n\n                this._logger.log(LogLevel.Error, message); // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\n\n\n                _context.next = 14;\n                return this._stopPromise;\n\n              case 14:\n                return _context.abrupt(\"return\", Promise.reject(new Error(message)));\n\n              case 17:\n                if (!(this._connectionState !== \"Connected\"\n                /* Connected */\n                )) {\n                  _context.next = 21;\n                  break;\n                }\n\n                // stop() was called and transitioned the client into the Disconnecting state.\n                _message = \"HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!\";\n\n                this._logger.log(LogLevel.Error, _message);\n\n                return _context.abrupt(\"return\", Promise.reject(new Error(_message)));\n\n              case 21:\n                this._connectionStarted = true;\n\n              case 22:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function start(_x) {\n        return _start.apply(this, arguments);\n      }\n\n      return start;\n    }()\n  }, {\n    key: \"send\",\n    value: function send(data) {\n      if (this._connectionState !== \"Connected\"\n      /* Connected */\n      ) {\n        return Promise.reject(new Error(\"Cannot send data if the connection is not in the 'Connected' State.\"));\n      }\n\n      if (!this._sendQueue) {\n        this._sendQueue = new TransportSendQueue(this.transport);\n      } // Transport will not be null if state is connected\n\n\n      return this._sendQueue.send(data);\n    }\n  }, {\n    key: \"stop\",\n    value: function () {\n      var _stop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(error) {\n        var _this = this;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(this._connectionState === \"Disconnected\"\n                /* Disconnected */\n                )) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                this._logger.log(LogLevel.Debug, \"Call to HttpConnection.stop(\".concat(error, \") ignored because the connection is already in the disconnected state.\"));\n\n                return _context2.abrupt(\"return\", Promise.resolve());\n\n              case 3:\n                if (!(this._connectionState === \"Disconnecting\"\n                /* Disconnecting */\n                )) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                this._logger.log(LogLevel.Debug, \"Call to HttpConnection.stop(\".concat(error, \") ignored because the connection is already in the disconnecting state.\"));\n\n                return _context2.abrupt(\"return\", this._stopPromise);\n\n              case 6:\n                this._connectionState = \"Disconnecting\"\n                /* Disconnecting */\n                ;\n                this._stopPromise = new Promise(function (resolve) {\n                  // Don't complete stop() until stopConnection() completes.\n                  _this._stopPromiseResolver = resolve;\n                }); // stopInternal should never throw so just observe it.\n\n                _context2.next = 10;\n                return this._stopInternal(error);\n\n              case 10:\n                _context2.next = 12;\n                return this._stopPromise;\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function stop(_x2) {\n        return _stop.apply(this, arguments);\n      }\n\n      return stop;\n    }()\n  }, {\n    key: \"_stopInternal\",\n    value: function () {\n      var _stopInternal2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(error) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                // Set error as soon as possible otherwise there is a race between\n                // the transport closing and providing an error and the error from a close message\n                // We would prefer the close message error.\n                this._stopError = error;\n                _context3.prev = 1;\n                _context3.next = 4;\n                return this._startInternalPromise;\n\n              case 4:\n                _context3.next = 8;\n                break;\n\n              case 6:\n                _context3.prev = 6;\n                _context3.t0 = _context3[\"catch\"](1);\n\n              case 8:\n                if (!this.transport) {\n                  _context3.next = 21;\n                  break;\n                }\n\n                _context3.prev = 9;\n                _context3.next = 12;\n                return this.transport.stop();\n\n              case 12:\n                _context3.next = 18;\n                break;\n\n              case 14:\n                _context3.prev = 14;\n                _context3.t1 = _context3[\"catch\"](9);\n\n                this._logger.log(LogLevel.Error, \"HttpConnection.transport.stop() threw error '\".concat(_context3.t1, \"'.\"));\n\n                this._stopConnection();\n\n              case 18:\n                this.transport = undefined;\n                _context3.next = 22;\n                break;\n\n              case 21:\n                this._logger.log(LogLevel.Debug, \"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.\");\n\n              case 22:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[1, 6], [9, 14]]);\n      }));\n\n      function _stopInternal(_x3) {\n        return _stopInternal2.apply(this, arguments);\n      }\n\n      return _stopInternal;\n    }()\n  }, {\n    key: \"_startInternal\",\n    value: function () {\n      var _startInternal2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(transferFormat) {\n        var _this2 = this;\n\n        var url, negotiateResponse, redirects;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                // Store the original base url and the access token factory since they may change\n                // as part of negotiating\n                url = this.baseUrl;\n                this._accessTokenFactory = this._options.accessTokenFactory;\n                _context4.prev = 2;\n\n                if (!this._options.skipNegotiation) {\n                  _context4.next = 13;\n                  break;\n                }\n\n                if (!(this._options.transport === HttpTransportType.WebSockets)) {\n                  _context4.next = 10;\n                  break;\n                }\n\n                // No need to add a connection ID in this case\n                this.transport = this._constructTransport(HttpTransportType.WebSockets); // We should just call connect directly in this case.\n                // No fallback or negotiate in this case.\n\n                _context4.next = 8;\n                return this._startTransport(url, transferFormat);\n\n              case 8:\n                _context4.next = 11;\n                break;\n\n              case 10:\n                throw new Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\n\n              case 11:\n                _context4.next = 32;\n                break;\n\n              case 13:\n                negotiateResponse = null;\n                redirects = 0;\n\n              case 15:\n                _context4.next = 17;\n                return this._getNegotiationResponse(url);\n\n              case 17:\n                negotiateResponse = _context4.sent;\n\n                if (!(this._connectionState === \"Disconnecting\"\n                /* Disconnecting */\n                || this._connectionState === \"Disconnected\"\n                /* Disconnected */\n                )) {\n                  _context4.next = 20;\n                  break;\n                }\n\n                throw new Error(\"The connection was stopped during negotiation.\");\n\n              case 20:\n                if (!negotiateResponse.error) {\n                  _context4.next = 22;\n                  break;\n                }\n\n                throw new Error(negotiateResponse.error);\n\n              case 22:\n                if (!negotiateResponse.ProtocolVersion) {\n                  _context4.next = 24;\n                  break;\n                }\n\n                throw new Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\n\n              case 24:\n                if (negotiateResponse.url) {\n                  url = negotiateResponse.url;\n                }\n\n                if (negotiateResponse.accessToken) {\n                  (function () {\n                    // Replace the current access token factory with one that uses\n                    // the returned access token\n                    var accessToken = negotiateResponse.accessToken;\n\n                    _this2._accessTokenFactory = function () {\n                      return accessToken;\n                    };\n                  })();\n                }\n\n                redirects++;\n\n              case 27:\n                if (negotiateResponse.url && redirects < MAX_REDIRECTS) {\n                  _context4.next = 15;\n                  break;\n                }\n\n              case 28:\n                if (!(redirects === MAX_REDIRECTS && negotiateResponse.url)) {\n                  _context4.next = 30;\n                  break;\n                }\n\n                throw new Error(\"Negotiate redirection limit exceeded.\");\n\n              case 30:\n                _context4.next = 32;\n                return this._createTransport(url, this._options.transport, negotiateResponse, transferFormat);\n\n              case 32:\n                if (this.transport instanceof LongPollingTransport) {\n                  this.features.inherentKeepAlive = true;\n                }\n\n                if (this._connectionState === \"Connecting\"\n                /* Connecting */\n                ) {\n                  // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.\n                  // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.\n                  this._logger.log(LogLevel.Debug, \"The HttpConnection connected successfully.\");\n\n                  this._connectionState = \"Connected\"\n                  /* Connected */\n                  ;\n                } // stop() is waiting on us via this.startInternalPromise so keep this.transport around so it can clean up.\n                // This is the only case startInternal can exit in neither the connected nor disconnected state because stopConnection()\n                // will transition to the disconnected state. start() will wait for the transition using the stopPromise.\n\n\n                _context4.next = 43;\n                break;\n\n              case 36:\n                _context4.prev = 36;\n                _context4.t0 = _context4[\"catch\"](2);\n\n                this._logger.log(LogLevel.Error, \"Failed to start the connection: \" + _context4.t0);\n\n                this._connectionState = \"Disconnected\"\n                /* Disconnected */\n                ;\n                this.transport = undefined; // if start fails, any active calls to stop assume that start will complete the stop promise\n\n                this._stopPromiseResolver();\n\n                return _context4.abrupt(\"return\", Promise.reject(_context4.t0));\n\n              case 43:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[2, 36]]);\n      }));\n\n      function _startInternal(_x4) {\n        return _startInternal2.apply(this, arguments);\n      }\n\n      return _startInternal;\n    }()\n  }, {\n    key: \"_getNegotiationResponse\",\n    value: function () {\n      var _getNegotiationResponse2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(url) {\n        var headers, token, _getUserAgentHeader, _getUserAgentHeader2, name, value, negotiateUrl, response, negotiateResponse, errorMessage;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                headers = {};\n\n                if (!this._accessTokenFactory) {\n                  _context5.next = 6;\n                  break;\n                }\n\n                _context5.next = 4;\n                return this._accessTokenFactory();\n\n              case 4:\n                token = _context5.sent;\n\n                if (token) {\n                  headers[HeaderNames.Authorization] = \"Bearer \".concat(token);\n                }\n\n              case 6:\n                _getUserAgentHeader = getUserAgentHeader(), _getUserAgentHeader2 = _slicedToArray(_getUserAgentHeader, 2), name = _getUserAgentHeader2[0], value = _getUserAgentHeader2[1];\n                headers[name] = value;\n                negotiateUrl = this._resolveNegotiateUrl(url);\n\n                this._logger.log(LogLevel.Debug, \"Sending negotiation request: \".concat(negotiateUrl, \".\"));\n\n                _context5.prev = 10;\n                _context5.next = 13;\n                return this._httpClient.post(negotiateUrl, {\n                  content: \"\",\n                  headers: _objectSpread(_objectSpread({}, headers), this._options.headers),\n                  timeout: this._options.timeout,\n                  withCredentials: this._options.withCredentials\n                });\n\n              case 13:\n                response = _context5.sent;\n\n                if (!(response.statusCode !== 200)) {\n                  _context5.next = 16;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", Promise.reject(new Error(\"Unexpected status code returned from negotiate '\".concat(response.statusCode, \"'\"))));\n\n              case 16:\n                negotiateResponse = JSON.parse(response.content);\n\n                if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {\n                  // Negotiate version 0 doesn't use connectionToken\n                  // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version\n                  negotiateResponse.connectionToken = negotiateResponse.connectionId;\n                }\n\n                return _context5.abrupt(\"return\", negotiateResponse);\n\n              case 21:\n                _context5.prev = 21;\n                _context5.t0 = _context5[\"catch\"](10);\n                errorMessage = \"Failed to complete negotiation with the server: \" + _context5.t0;\n\n                if (_context5.t0 instanceof HttpError) {\n                  if (_context5.t0.statusCode === 404) {\n                    errorMessage = errorMessage + \" Either this is not a SignalR endpoint or there is a proxy blocking the connection.\";\n                  }\n                }\n\n                this._logger.log(LogLevel.Error, errorMessage);\n\n                return _context5.abrupt(\"return\", Promise.reject(new FailedToNegotiateWithServerError(errorMessage)));\n\n              case 27:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[10, 21]]);\n      }));\n\n      function _getNegotiationResponse(_x5) {\n        return _getNegotiationResponse2.apply(this, arguments);\n      }\n\n      return _getNegotiationResponse;\n    }()\n  }, {\n    key: \"_createConnectUrl\",\n    value: function _createConnectUrl(url, connectionToken) {\n      if (!connectionToken) {\n        return url;\n      }\n\n      return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + \"id=\".concat(connectionToken);\n    }\n  }, {\n    key: \"_createTransport\",\n    value: function () {\n      var _createTransport2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(url, requestedTransport, negotiateResponse, requestedTransferFormat) {\n        var connectUrl, transportExceptions, transports, negotiate, _iterator, _step, endpoint, transportOrError, message;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                connectUrl = this._createConnectUrl(url, negotiateResponse.connectionToken);\n\n                if (!this._isITransport(requestedTransport)) {\n                  _context6.next = 8;\n                  break;\n                }\n\n                this._logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\n\n                this.transport = requestedTransport;\n                _context6.next = 6;\n                return this._startTransport(connectUrl, requestedTransferFormat);\n\n              case 6:\n                this.connectionId = negotiateResponse.connectionId;\n                return _context6.abrupt(\"return\");\n\n              case 8:\n                transportExceptions = [];\n                transports = negotiateResponse.availableTransports || [];\n                negotiate = negotiateResponse;\n                _iterator = _createForOfIteratorHelper(transports);\n                _context6.prev = 12;\n\n                _iterator.s();\n\n              case 14:\n                if ((_step = _iterator.n()).done) {\n                  _context6.next = 53;\n                  break;\n                }\n\n                endpoint = _step.value;\n                transportOrError = this._resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat);\n\n                if (!(transportOrError instanceof Error)) {\n                  _context6.next = 22;\n                  break;\n                }\n\n                // Store the error and continue, we don't want to cause a re-negotiate in these cases\n                transportExceptions.push(\"\".concat(endpoint.transport, \" failed:\"));\n                transportExceptions.push(transportOrError);\n                _context6.next = 51;\n                break;\n\n              case 22:\n                if (!this._isITransport(transportOrError)) {\n                  _context6.next = 51;\n                  break;\n                }\n\n                this.transport = transportOrError;\n\n                if (negotiate) {\n                  _context6.next = 35;\n                  break;\n                }\n\n                _context6.prev = 25;\n                _context6.next = 28;\n                return this._getNegotiationResponse(url);\n\n              case 28:\n                negotiate = _context6.sent;\n                _context6.next = 34;\n                break;\n\n              case 31:\n                _context6.prev = 31;\n                _context6.t0 = _context6[\"catch\"](25);\n                return _context6.abrupt(\"return\", Promise.reject(_context6.t0));\n\n              case 34:\n                connectUrl = this._createConnectUrl(url, negotiate.connectionToken);\n\n              case 35:\n                _context6.prev = 35;\n                _context6.next = 38;\n                return this._startTransport(connectUrl, requestedTransferFormat);\n\n              case 38:\n                this.connectionId = negotiate.connectionId;\n                return _context6.abrupt(\"return\");\n\n              case 42:\n                _context6.prev = 42;\n                _context6.t1 = _context6[\"catch\"](35);\n\n                this._logger.log(LogLevel.Error, \"Failed to start the transport '\".concat(endpoint.transport, \"': \").concat(_context6.t1));\n\n                negotiate = undefined;\n                transportExceptions.push(new FailedToStartTransportError(\"\".concat(endpoint.transport, \" failed: \").concat(_context6.t1), HttpTransportType[endpoint.transport]));\n\n                if (!(this._connectionState !== \"Connecting\"\n                /* Connecting */\n                )) {\n                  _context6.next = 51;\n                  break;\n                }\n\n                message = \"Failed to select transport before stop() was called.\";\n\n                this._logger.log(LogLevel.Debug, message);\n\n                return _context6.abrupt(\"return\", Promise.reject(new Error(message)));\n\n              case 51:\n                _context6.next = 14;\n                break;\n\n              case 53:\n                _context6.next = 58;\n                break;\n\n              case 55:\n                _context6.prev = 55;\n                _context6.t2 = _context6[\"catch\"](12);\n\n                _iterator.e(_context6.t2);\n\n              case 58:\n                _context6.prev = 58;\n\n                _iterator.f();\n\n                return _context6.finish(58);\n\n              case 61:\n                if (!(transportExceptions.length > 0)) {\n                  _context6.next = 63;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", Promise.reject(new AggregateErrors(\"Unable to connect to the server with any of the available transports. \".concat(transportExceptions.join(\" \")), transportExceptions)));\n\n              case 63:\n                return _context6.abrupt(\"return\", Promise.reject(new Error(\"None of the transports supported by the client are supported by the server.\")));\n\n              case 64:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[12, 55, 58, 61], [25, 31], [35, 42]]);\n      }));\n\n      function _createTransport(_x6, _x7, _x8, _x9) {\n        return _createTransport2.apply(this, arguments);\n      }\n\n      return _createTransport;\n    }()\n  }, {\n    key: \"_constructTransport\",\n    value: function _constructTransport(transport) {\n      switch (transport) {\n        case HttpTransportType.WebSockets:\n          if (!this._options.WebSocket) {\n            throw new Error(\"'WebSocket' is not supported in your environment.\");\n          }\n\n          return new WebSocketTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options.logMessageContent, this._options.WebSocket, this._options.headers || {});\n\n        case HttpTransportType.ServerSentEvents:\n          if (!this._options.EventSource) {\n            throw new Error(\"'EventSource' is not supported in your environment.\");\n          }\n\n          return new ServerSentEventsTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options);\n\n        case HttpTransportType.LongPolling:\n          return new LongPollingTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options);\n\n        default:\n          throw new Error(\"Unknown transport: \".concat(transport, \".\"));\n      }\n    }\n  }, {\n    key: \"_startTransport\",\n    value: function _startTransport(url, transferFormat) {\n      var _this3 = this;\n\n      this.transport.onreceive = this.onreceive;\n\n      this.transport.onclose = function (e) {\n        return _this3._stopConnection(e);\n      };\n\n      return this.transport.connect(url, transferFormat);\n    }\n  }, {\n    key: \"_resolveTransportOrError\",\n    value: function _resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat) {\n      var transport = HttpTransportType[endpoint.transport];\n\n      if (transport === null || transport === undefined) {\n        this._logger.log(LogLevel.Debug, \"Skipping transport '\".concat(endpoint.transport, \"' because it is not supported by this client.\"));\n\n        return new Error(\"Skipping transport '\".concat(endpoint.transport, \"' because it is not supported by this client.\"));\n      } else {\n        if (transportMatches(requestedTransport, transport)) {\n          var transferFormats = endpoint.transferFormats.map(function (s) {\n            return TransferFormat[s];\n          });\n\n          if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\n            if (transport === HttpTransportType.WebSockets && !this._options.WebSocket || transport === HttpTransportType.ServerSentEvents && !this._options.EventSource) {\n              this._logger.log(LogLevel.Debug, \"Skipping transport '\".concat(HttpTransportType[transport], \"' because it is not supported in your environment.'\"));\n\n              return new UnsupportedTransportError(\"'\".concat(HttpTransportType[transport], \"' is not supported in your environment.\"), transport);\n            } else {\n              this._logger.log(LogLevel.Debug, \"Selecting transport '\".concat(HttpTransportType[transport], \"'.\"));\n\n              try {\n                return this._constructTransport(transport);\n              } catch (ex) {\n                return ex;\n              }\n            }\n          } else {\n            this._logger.log(LogLevel.Debug, \"Skipping transport '\".concat(HttpTransportType[transport], \"' because it does not support the requested transfer format '\").concat(TransferFormat[requestedTransferFormat], \"'.\"));\n\n            return new Error(\"'\".concat(HttpTransportType[transport], \"' does not support \").concat(TransferFormat[requestedTransferFormat], \".\"));\n          }\n        } else {\n          this._logger.log(LogLevel.Debug, \"Skipping transport '\".concat(HttpTransportType[transport], \"' because it was disabled by the client.\"));\n\n          return new DisabledTransportError(\"'\".concat(HttpTransportType[transport], \"' is disabled by the client.\"), transport);\n        }\n      }\n    }\n  }, {\n    key: \"_isITransport\",\n    value: function _isITransport(transport) {\n      return transport && typeof transport === \"object\" && \"connect\" in transport;\n    }\n  }, {\n    key: \"_stopConnection\",\n    value: function _stopConnection(error) {\n      var _this4 = this;\n\n      this._logger.log(LogLevel.Debug, \"HttpConnection.stopConnection(\".concat(error, \") called while in state \").concat(this._connectionState, \".\"));\n\n      this.transport = undefined; // If we have a stopError, it takes precedence over the error from the transport\n\n      error = this._stopError || error;\n      this._stopError = undefined;\n\n      if (this._connectionState === \"Disconnected\"\n      /* Disconnected */\n      ) {\n        this._logger.log(LogLevel.Debug, \"Call to HttpConnection.stopConnection(\".concat(error, \") was ignored because the connection is already in the disconnected state.\"));\n\n        return;\n      }\n\n      if (this._connectionState === \"Connecting\"\n      /* Connecting */\n      ) {\n        this._logger.log(LogLevel.Warning, \"Call to HttpConnection.stopConnection(\".concat(error, \") was ignored because the connection is still in the connecting state.\"));\n\n        throw new Error(\"HttpConnection.stopConnection(\".concat(error, \") was called while the connection is still in the connecting state.\"));\n      }\n\n      if (this._connectionState === \"Disconnecting\"\n      /* Disconnecting */\n      ) {\n        // A call to stop() induced this call to stopConnection and needs to be completed.\n        // Any stop() awaiters will be scheduled to continue after the onclose callback fires.\n        this._stopPromiseResolver();\n      }\n\n      if (error) {\n        this._logger.log(LogLevel.Error, \"Connection disconnected with error '\".concat(error, \"'.\"));\n      } else {\n        this._logger.log(LogLevel.Information, \"Connection disconnected.\");\n      }\n\n      if (this._sendQueue) {\n        this._sendQueue.stop().catch(function (e) {\n          _this4._logger.log(LogLevel.Error, \"TransportSendQueue.stop() threw error '\".concat(e, \"'.\"));\n        });\n\n        this._sendQueue = undefined;\n      }\n\n      this.connectionId = undefined;\n      this._connectionState = \"Disconnected\"\n      /* Disconnected */\n      ;\n\n      if (this._connectionStarted) {\n        this._connectionStarted = false;\n\n        try {\n          if (this.onclose) {\n            this.onclose(error);\n          }\n        } catch (e) {\n          this._logger.log(LogLevel.Error, \"HttpConnection.onclose(\".concat(error, \") threw error '\").concat(e, \"'.\"));\n        }\n      }\n    }\n  }, {\n    key: \"_resolveUrl\",\n    value: function _resolveUrl(url) {\n      // startsWith is not supported in IE\n      if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\n        return url;\n      }\n\n      if (!Platform.isBrowser) {\n        throw new Error(\"Cannot resolve '\".concat(url, \"'.\"));\n      } // Setting the url to the href propery of an anchor tag handles normalization\n      // for us. There are 3 main cases.\n      // 1. Relative path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\n      // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\n      // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\n\n\n      var aTag = window.document.createElement(\"a\");\n      aTag.href = url;\n\n      this._logger.log(LogLevel.Information, \"Normalizing '\".concat(url, \"' to '\").concat(aTag.href, \"'.\"));\n\n      return aTag.href;\n    }\n  }, {\n    key: \"_resolveNegotiateUrl\",\n    value: function _resolveNegotiateUrl(url) {\n      var index = url.indexOf(\"?\");\n      var negotiateUrl = url.substring(0, index === -1 ? url.length : index);\n\n      if (negotiateUrl[negotiateUrl.length - 1] !== \"/\") {\n        negotiateUrl += \"/\";\n      }\n\n      negotiateUrl += \"negotiate\";\n      negotiateUrl += index === -1 ? \"\" : url.substring(index);\n\n      if (negotiateUrl.indexOf(\"negotiateVersion\") === -1) {\n        negotiateUrl += index === -1 ? \"?\" : \"&\";\n        negotiateUrl += \"negotiateVersion=\" + this._negotiateVersion;\n      }\n\n      return negotiateUrl;\n    }\n  }]);\n\n  return HttpConnection;\n}();\n\nfunction transportMatches(requestedTransport, actualTransport) {\n  return !requestedTransport || (actualTransport & requestedTransport) !== 0;\n}\n/** @private */\n\n\nexport var TransportSendQueue = /*#__PURE__*/function () {\n  function TransportSendQueue(_transport) {\n    _classCallCheck(this, TransportSendQueue);\n\n    this._transport = _transport;\n    this._buffer = [];\n    this._executing = true;\n    this._sendBufferedData = new PromiseSource();\n    this._transportResult = new PromiseSource();\n    this._sendLoopPromise = this._sendLoop();\n  }\n\n  _createClass(TransportSendQueue, [{\n    key: \"send\",\n    value: function send(data) {\n      this._bufferData(data);\n\n      if (!this._transportResult) {\n        this._transportResult = new PromiseSource();\n      }\n\n      return this._transportResult.promise;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this._executing = false;\n\n      this._sendBufferedData.resolve();\n\n      return this._sendLoopPromise;\n    }\n  }, {\n    key: \"_bufferData\",\n    value: function _bufferData(data) {\n      if (this._buffer.length && typeof this._buffer[0] !== typeof data) {\n        throw new Error(\"Expected data to be of type \".concat(typeof this._buffer, \" but was of type \").concat(typeof data));\n      }\n\n      this._buffer.push(data);\n\n      this._sendBufferedData.resolve();\n    }\n  }, {\n    key: \"_sendLoop\",\n    value: function () {\n      var _sendLoop2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var transportResult, data;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!true) {\n                  _context7.next = 22;\n                  break;\n                }\n\n                _context7.next = 3;\n                return this._sendBufferedData.promise;\n\n              case 3:\n                if (this._executing) {\n                  _context7.next = 6;\n                  break;\n                }\n\n                if (this._transportResult) {\n                  this._transportResult.reject(\"Connection stopped.\");\n                }\n\n                return _context7.abrupt(\"break\", 22);\n\n              case 6:\n                this._sendBufferedData = new PromiseSource();\n                transportResult = this._transportResult;\n                this._transportResult = undefined;\n                data = typeof this._buffer[0] === \"string\" ? this._buffer.join(\"\") : TransportSendQueue._concatBuffers(this._buffer);\n                this._buffer.length = 0;\n                _context7.prev = 11;\n                _context7.next = 14;\n                return this._transport.send(data);\n\n              case 14:\n                transportResult.resolve();\n                _context7.next = 20;\n                break;\n\n              case 17:\n                _context7.prev = 17;\n                _context7.t0 = _context7[\"catch\"](11);\n                transportResult.reject(_context7.t0);\n\n              case 20:\n                _context7.next = 0;\n                break;\n\n              case 22:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[11, 17]]);\n      }));\n\n      function _sendLoop() {\n        return _sendLoop2.apply(this, arguments);\n      }\n\n      return _sendLoop;\n    }()\n  }], [{\n    key: \"_concatBuffers\",\n    value: function _concatBuffers(arrayBuffers) {\n      var totalLength = arrayBuffers.map(function (b) {\n        return b.byteLength;\n      }).reduce(function (a, b) {\n        return a + b;\n      });\n      var result = new Uint8Array(totalLength);\n      var offset = 0;\n\n      var _iterator2 = _createForOfIteratorHelper(arrayBuffers),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var item = _step2.value;\n          result.set(new Uint8Array(item), offset);\n          offset += item.byteLength;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return result.buffer;\n    }\n  }]);\n\n  return TransportSendQueue;\n}();\n\nvar PromiseSource = /*#__PURE__*/function () {\n  function PromiseSource() {\n    var _this5 = this;\n\n    _classCallCheck(this, PromiseSource);\n\n    this.promise = new Promise(function (resolve, reject) {\n      var _ref;\n\n      return _ref = [resolve, reject], _this5._resolver = _ref[0], _this5._rejecter = _ref[1], _ref;\n    });\n  }\n\n  _createClass(PromiseSource, [{\n    key: \"resolve\",\n    value: function resolve() {\n      this._resolver();\n    }\n  }, {\n    key: \"reject\",\n    value: function reject(reason) {\n      this._rejecter(reason);\n    }\n  }]);\n\n  return PromiseSource;\n}(); //# sourceMappingURL=HttpConnection.js.map","map":null,"metadata":{},"sourceType":"module"}