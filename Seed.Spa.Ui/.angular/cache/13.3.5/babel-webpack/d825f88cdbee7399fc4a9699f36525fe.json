{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { AbortController } from \"./AbortController\";\nimport { HttpError, TimeoutError } from \"./Errors\";\nimport { LogLevel } from \"./ILogger\";\nimport { TransferFormat } from \"./ITransport\";\nimport { Arg, getDataDetail, sendMessage } from \"./Utils\";\nvar SHUTDOWN_TIMEOUT = 5 * 1000; // Not exported from 'index', this type is internal.\n\n/** @private */\n\nvar LongPollingTransport =\n/** @class */\nfunction () {\n  function LongPollingTransport(httpClient, accessTokenFactory, logger, logMessageContent, shutdownTimeout) {\n    this.httpClient = httpClient;\n\n    this.accessTokenFactory = accessTokenFactory || function () {\n      return null;\n    };\n\n    this.logger = logger;\n    this.pollAbort = new AbortController();\n    this.logMessageContent = logMessageContent;\n    this.shutdownTimeout = shutdownTimeout || SHUTDOWN_TIMEOUT;\n  }\n\n  Object.defineProperty(LongPollingTransport.prototype, \"pollAborted\", {\n    // This is an internal type, not exported from 'index' so this is really just internal.\n    get: function get() {\n      return this.pollAbort.aborted;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  LongPollingTransport.prototype.connect = function (url, transferFormat) {\n    return __awaiter(this, void 0, void 0, function () {\n      var pollOptions, token, closeError, pollUrl, response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            Arg.isRequired(url, \"url\");\n            Arg.isRequired(transferFormat, \"transferFormat\");\n            Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n            this.url = url;\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting\");\n\n            if (transferFormat === TransferFormat.Binary && typeof new XMLHttpRequest().responseType !== \"string\") {\n              // This will work if we fix: https://github.com/aspnet/SignalR/issues/742\n              throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\n            }\n\n            pollOptions = {\n              abortSignal: this.pollAbort.signal,\n              headers: {},\n              timeout: 90000\n            };\n\n            if (transferFormat === TransferFormat.Binary) {\n              pollOptions.responseType = \"arraybuffer\";\n            }\n\n            return [4\n            /*yield*/\n            , this.accessTokenFactory()];\n\n          case 1:\n            token = _a.sent();\n            this.updateHeaderToken(pollOptions, token);\n            pollUrl = url + \"&_=\" + Date.now();\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) polling: \" + pollUrl);\n            return [4\n            /*yield*/\n            , this.httpClient.get(pollUrl, pollOptions)];\n\n          case 2:\n            response = _a.sent();\n\n            if (response.statusCode !== 200) {\n              this.logger.log(LogLevel.Error, \"(LongPolling transport) Unexpected response code: \" + response.statusCode); // Mark running as false so that the poll immediately ends and runs the close logic\n\n              closeError = new HttpError(response.statusText, response.statusCode);\n              this.running = false;\n            } else {\n              this.running = true;\n            } // tslint:disable-next-line:no-floating-promises\n\n\n            this.poll(this.url, pollOptions, closeError);\n            return [2\n            /*return*/\n            , Promise.resolve()];\n        }\n      });\n    });\n  };\n\n  LongPollingTransport.prototype.updateHeaderToken = function (request, token) {\n    if (token) {\n      // tslint:disable-next-line:no-string-literal\n      request.headers[\"Authorization\"] = \"Bearer \" + token;\n      return;\n    } // tslint:disable-next-line:no-string-literal\n\n\n    if (request.headers[\"Authorization\"]) {\n      // tslint:disable-next-line:no-string-literal\n      delete request.headers[\"Authorization\"];\n    }\n  };\n\n  LongPollingTransport.prototype.poll = function (url, pollOptions, closeError) {\n    return __awaiter(this, void 0, void 0, function () {\n      var token, pollUrl, response, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0,, 8, 9]);\n\n            _a.label = 1;\n\n          case 1:\n            if (!this.running) return [3\n            /*break*/\n            , 7];\n            return [4\n            /*yield*/\n            , this.accessTokenFactory()];\n\n          case 2:\n            token = _a.sent();\n            this.updateHeaderToken(pollOptions, token);\n            _a.label = 3;\n\n          case 3:\n            _a.trys.push([3, 5,, 6]);\n\n            pollUrl = url + \"&_=\" + Date.now();\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) polling: \" + pollUrl);\n            return [4\n            /*yield*/\n            , this.httpClient.get(pollUrl, pollOptions)];\n\n          case 4:\n            response = _a.sent();\n\n            if (response.statusCode === 204) {\n              this.logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server\");\n              this.running = false;\n            } else if (response.statusCode !== 200) {\n              this.logger.log(LogLevel.Error, \"(LongPolling transport) Unexpected response code: \" + response.statusCode); // Unexpected status code\n\n              closeError = new HttpError(response.statusText, response.statusCode);\n              this.running = false;\n            } else {\n              // Process the response\n              if (response.content) {\n                this.logger.log(LogLevel.Trace, \"(LongPolling transport) data received. \" + getDataDetail(response.content, this.logMessageContent));\n\n                if (this.onreceive) {\n                  this.onreceive(response.content);\n                }\n              } else {\n                // This is another way timeout manifest.\n                this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n              }\n            }\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 5:\n            e_1 = _a.sent();\n\n            if (!this.running) {\n              // Log but disregard errors that occur after we were stopped by DELETE\n              this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll errored after shutdown: \" + e_1.message);\n            } else {\n              if (e_1 instanceof TimeoutError) {\n                // Ignore timeouts and reissue the poll.\n                this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n              } else {\n                // Close the connection with the error as the result.\n                closeError = e_1;\n                this.running = false;\n              }\n            }\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 6:\n            return [3\n            /*break*/\n            , 1];\n\n          case 7:\n            return [3\n            /*break*/\n            , 9];\n\n          case 8:\n            // Indicate that we've stopped so the shutdown timer doesn't get registered.\n            this.stopped = true; // Clean up the shutdown timer if it was registered\n\n            if (this.shutdownTimer) {\n              clearTimeout(this.shutdownTimer);\n            } // Fire our onclosed event\n\n\n            if (this.onclose) {\n              this.logger.log(LogLevel.Trace, \"(LongPolling transport) Firing onclose event. Error: \" + (closeError || \"<undefined>\"));\n              this.onclose(closeError);\n            }\n\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Transport finished.\");\n            return [7\n            /*endfinally*/\n            ];\n\n          case 9:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  LongPollingTransport.prototype.send = function (data) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (!this.running) {\n          return [2\n          /*return*/\n          , Promise.reject(new Error(\"Cannot send until the transport is connected\"))];\n        }\n\n        return [2\n        /*return*/\n        , sendMessage(this.logger, \"LongPolling\", this.httpClient, this.url, this.accessTokenFactory, data, this.logMessageContent)];\n      });\n    });\n  };\n\n  LongPollingTransport.prototype.stop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var deleteOptions, token;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0,, 3, 4]);\n\n            this.running = false;\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) sending DELETE request to \" + this.url + \".\");\n            deleteOptions = {\n              headers: {}\n            };\n            return [4\n            /*yield*/\n            , this.accessTokenFactory()];\n\n          case 1:\n            token = _a.sent();\n            this.updateHeaderToken(deleteOptions, token);\n            return [4\n            /*yield*/\n            , this.httpClient.delete(this.url, deleteOptions)];\n\n          case 2:\n            _a.sent();\n\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request accepted.\");\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            // Abort the poll after the shutdown timeout if the server doesn't stop the poll.\n            if (!this.stopped) {\n              this.shutdownTimer = setTimeout(function () {\n                _this.logger.log(LogLevel.Warning, \"(LongPolling transport) server did not terminate after DELETE request, canceling poll.\"); // Abort any outstanding poll\n\n\n                _this.pollAbort.abort();\n              }, this.shutdownTimeout);\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return LongPollingTransport;\n}();\n\nexport { LongPollingTransport }; //# sourceMappingURL=LongPollingTransport.js.map","map":null,"metadata":{},"sourceType":"module"}