{"ast":null,"code":"import _classCallCheck from \"C:\\\\projetos\\\\gerador-project-all-solution\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\projetos\\\\gerador-project-all-solution\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _inherits from \"C:\\\\projetos\\\\gerador-project-all-solution\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\nimport _createSuper from \"C:\\\\projetos\\\\gerador-project-all-solution\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createSuper.js\";\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\nimport { HttpClient, HttpResponse } from \"./HttpClient\";\nimport { LogLevel } from \"./ILogger\";\nexport var XhrHttpClient = /*#__PURE__*/function (_HttpClient) {\n  _inherits(XhrHttpClient, _HttpClient);\n\n  var _super = _createSuper(XhrHttpClient);\n\n  function XhrHttpClient(logger) {\n    var _this;\n\n    _classCallCheck(this, XhrHttpClient);\n\n    _this = _super.call(this);\n    _this._logger = logger;\n    return _this;\n  }\n  /** @inheritDoc */\n\n\n  _createClass(XhrHttpClient, [{\n    key: \"send\",\n    value: function send(request) {\n      var _this2 = this;\n\n      // Check that abort was not signaled before calling send\n      if (request.abortSignal && request.abortSignal.aborted) {\n        return Promise.reject(new AbortError());\n      }\n\n      if (!request.method) {\n        return Promise.reject(new Error(\"No method defined.\"));\n      }\n\n      if (!request.url) {\n        return Promise.reject(new Error(\"No url defined.\"));\n      }\n\n      return new Promise(function (resolve, reject) {\n        var xhr = new XMLHttpRequest();\n        xhr.open(request.method, request.url, true);\n        xhr.withCredentials = request.withCredentials === undefined ? true : request.withCredentials;\n        xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\"); // Explicitly setting the Content-Type header for React Native on Android platform.\n\n        xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\n        var headers = request.headers;\n\n        if (headers) {\n          Object.keys(headers).forEach(function (header) {\n            xhr.setRequestHeader(header, headers[header]);\n          });\n        }\n\n        if (request.responseType) {\n          xhr.responseType = request.responseType;\n        }\n\n        if (request.abortSignal) {\n          request.abortSignal.onabort = function () {\n            xhr.abort();\n            reject(new AbortError());\n          };\n        }\n\n        if (request.timeout) {\n          xhr.timeout = request.timeout;\n        }\n\n        xhr.onload = function () {\n          if (request.abortSignal) {\n            request.abortSignal.onabort = null;\n          }\n\n          if (xhr.status >= 200 && xhr.status < 300) {\n            resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\n          } else {\n            reject(new HttpError(xhr.response || xhr.responseText || xhr.statusText, xhr.status));\n          }\n        };\n\n        xhr.onerror = function () {\n          _this2._logger.log(LogLevel.Warning, \"Error from HTTP request. \".concat(xhr.status, \": \").concat(xhr.statusText, \".\"));\n\n          reject(new HttpError(xhr.statusText, xhr.status));\n        };\n\n        xhr.ontimeout = function () {\n          _this2._logger.log(LogLevel.Warning, \"Timeout from HTTP request.\");\n\n          reject(new TimeoutError());\n        };\n\n        xhr.send(request.content || \"\");\n      });\n    }\n  }]);\n\n  return XhrHttpClient;\n}(HttpClient); //# sourceMappingURL=XhrHttpClient.js.map","map":null,"metadata":{},"sourceType":"module"}