{"ast":null,"code":"import _objectSpread from \"C:\\\\projetos\\\\gerador-project-all-solution\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\objectSpread2.js\";\nimport _classCallCheck from \"C:\\\\projetos\\\\gerador-project-all-solution\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\projetos\\\\gerador-project-all-solution\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { DefaultReconnectPolicy } from \"./DefaultReconnectPolicy\";\nimport { HttpConnection } from \"./HttpConnection\";\nimport { HubConnection } from \"./HubConnection\";\nimport { LogLevel } from \"./ILogger\";\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\nimport { NullLogger } from \"./Loggers\";\nimport { Arg, ConsoleLogger } from \"./Utils\";\nvar LogLevelNameMapping = {\n  trace: LogLevel.Trace,\n  debug: LogLevel.Debug,\n  info: LogLevel.Information,\n  information: LogLevel.Information,\n  warn: LogLevel.Warning,\n  warning: LogLevel.Warning,\n  error: LogLevel.Error,\n  critical: LogLevel.Critical,\n  none: LogLevel.None\n};\n\nfunction parseLogLevel(name) {\n  // Case-insensitive matching via lower-casing\n  // Yes, I know case-folding is a complicated problem in Unicode, but we only support\n  // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.\n  var mapping = LogLevelNameMapping[name.toLowerCase()];\n\n  if (typeof mapping !== \"undefined\") {\n    return mapping;\n  } else {\n    throw new Error(\"Unknown log level: \".concat(name));\n  }\n}\n/** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */\n\n\nexport var HubConnectionBuilder = /*#__PURE__*/function () {\n  function HubConnectionBuilder() {\n    _classCallCheck(this, HubConnectionBuilder);\n  }\n\n  _createClass(HubConnectionBuilder, [{\n    key: \"configureLogging\",\n    value: function configureLogging(logging) {\n      Arg.isRequired(logging, \"logging\");\n\n      if (isLogger(logging)) {\n        this.logger = logging;\n      } else if (typeof logging === \"string\") {\n        var logLevel = parseLogLevel(logging);\n        this.logger = new ConsoleLogger(logLevel);\n      } else {\n        this.logger = new ConsoleLogger(logging);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"withUrl\",\n    value: function withUrl(url, transportTypeOrOptions) {\n      Arg.isRequired(url, \"url\");\n      Arg.isNotEmpty(url, \"url\");\n      this.url = url; // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\n      // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\n\n      if (typeof transportTypeOrOptions === \"object\") {\n        this.httpConnectionOptions = _objectSpread(_objectSpread({}, this.httpConnectionOptions), transportTypeOrOptions);\n      } else {\n        this.httpConnectionOptions = _objectSpread(_objectSpread({}, this.httpConnectionOptions), {}, {\n          transport: transportTypeOrOptions\n        });\n      }\n\n      return this;\n    }\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.\r\n     *\r\n     * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.\r\n     */\n\n  }, {\n    key: \"withHubProtocol\",\n    value: function withHubProtocol(protocol) {\n      Arg.isRequired(protocol, \"protocol\");\n      this.protocol = protocol;\n      return this;\n    }\n  }, {\n    key: \"withAutomaticReconnect\",\n    value: function withAutomaticReconnect(retryDelaysOrReconnectPolicy) {\n      if (this.reconnectPolicy) {\n        throw new Error(\"A reconnectPolicy has already been set.\");\n      }\n\n      if (!retryDelaysOrReconnectPolicy) {\n        this.reconnectPolicy = new DefaultReconnectPolicy();\n      } else if (Array.isArray(retryDelaysOrReconnectPolicy)) {\n        this.reconnectPolicy = new DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);\n      } else {\n        this.reconnectPolicy = retryDelaysOrReconnectPolicy;\n      }\n\n      return this;\n    }\n    /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.\r\n     *\r\n     * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.\r\n     */\n\n  }, {\n    key: \"build\",\n    value: function build() {\n      // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\n      // provided to configureLogger\n      var httpConnectionOptions = this.httpConnectionOptions || {}; // If it's 'null', the user **explicitly** asked for null, don't mess with it.\n\n      if (httpConnectionOptions.logger === undefined) {\n        // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\n        httpConnectionOptions.logger = this.logger;\n      } // Now create the connection\n\n\n      if (!this.url) {\n        throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\n      }\n\n      var connection = new HttpConnection(this.url, httpConnectionOptions);\n      return HubConnection.create(connection, this.logger || NullLogger.instance, this.protocol || new JsonHubProtocol(), this.reconnectPolicy);\n    }\n  }]);\n\n  return HubConnectionBuilder;\n}();\n\nfunction isLogger(logger) {\n  return logger.log !== undefined;\n} //# sourceMappingURL=HubConnectionBuilder.js.map","map":null,"metadata":{},"sourceType":"module"}