{"ast":null,"code":"import _objectSpread from \"C:\\\\projetos\\\\gerador-project-all-solution\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\objectSpread2.js\";\nimport _slicedToArray from \"C:\\\\projetos\\\\gerador-project-all-solution\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";\nimport _defineProperty from \"C:\\\\projetos\\\\gerador-project-all-solution\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\defineProperty.js\";\nimport _asyncToGenerator from \"C:\\\\projetos\\\\gerador-project-all-solution\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport _classCallCheck from \"C:\\\\projetos\\\\gerador-project-all-solution\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\projetos\\\\gerador-project-all-solution\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _regeneratorRuntime from \"C:\\\\projetos\\\\gerador-project-all-solution\\\\Seed.Spa.Ui\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { LogLevel } from \"./ILogger\";\nimport { NullLogger } from \"./Loggers\"; // Version token that will be replaced by the prepack command\n\n/** The version of the SignalR client. */\n\nexport var VERSION = \"6.0.7\";\n/** @private */\n\nexport var Arg = /*#__PURE__*/function () {\n  function Arg() {\n    _classCallCheck(this, Arg);\n  }\n\n  _createClass(Arg, null, [{\n    key: \"isRequired\",\n    value: function isRequired(val, name) {\n      if (val === null || val === undefined) {\n        throw new Error(\"The '\".concat(name, \"' argument is required.\"));\n      }\n    }\n  }, {\n    key: \"isNotEmpty\",\n    value: function isNotEmpty(val, name) {\n      if (!val || val.match(/^\\s*$/)) {\n        throw new Error(\"The '\".concat(name, \"' argument should not be empty.\"));\n      }\n    }\n  }, {\n    key: \"isIn\",\n    value: function isIn(val, values, name) {\n      // TypeScript enums have keys for **both** the name and the value of each enum member on the type itself.\n      if (!(val in values)) {\n        throw new Error(\"Unknown \".concat(name, \" value: \").concat(val, \".\"));\n      }\n    }\n  }]);\n\n  return Arg;\n}();\n/** @private */\n\nexport var Platform = /*#__PURE__*/function () {\n  function Platform() {\n    _classCallCheck(this, Platform);\n  }\n\n  _createClass(Platform, null, [{\n    key: \"isBrowser\",\n    get: // react-native has a window but no document so we should check both\n    function get() {\n      return typeof window === \"object\" && typeof window.document === \"object\";\n    } // WebWorkers don't have a window object so the isBrowser check would fail\n\n  }, {\n    key: \"isWebWorker\",\n    get: function get() {\n      return typeof self === \"object\" && \"importScripts\" in self;\n    } // react-native has a window but no document\n\n  }, {\n    key: \"isReactNative\",\n    get: function get() {\n      return typeof window === \"object\" && typeof window.document === \"undefined\";\n    } // Node apps shouldn't have a window object, but WebWorkers don't either\n    // so we need to check for both WebWorker and window\n\n  }, {\n    key: \"isNode\",\n    get: function get() {\n      return !this.isBrowser && !this.isWebWorker && !this.isReactNative;\n    }\n  }]);\n\n  return Platform;\n}();\n/** @private */\n\nexport function getDataDetail(data, includeContent) {\n  var detail = \"\";\n\n  if (isArrayBuffer(data)) {\n    detail = \"Binary data of length \".concat(data.byteLength);\n\n    if (includeContent) {\n      detail += \". Content: '\".concat(formatArrayBuffer(data), \"'\");\n    }\n  } else if (typeof data === \"string\") {\n    detail = \"String data of length \".concat(data.length);\n\n    if (includeContent) {\n      detail += \". Content: '\".concat(data, \"'\");\n    }\n  }\n\n  return detail;\n}\n/** @private */\n\nexport function formatArrayBuffer(data) {\n  var view = new Uint8Array(data); // Uint8Array.map only supports returning another Uint8Array?\n\n  var str = \"\";\n  view.forEach(function (num) {\n    var pad = num < 16 ? \"0\" : \"\";\n    str += \"0x\".concat(pad).concat(num.toString(16), \" \");\n  }); // Trim of trailing space.\n\n  return str.substr(0, str.length - 1);\n} // Also in signalr-protocol-msgpack/Utils.ts\n\n/** @private */\n\nexport function isArrayBuffer(val) {\n  return val && typeof ArrayBuffer !== \"undefined\" && (val instanceof ArrayBuffer || // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\n  val.constructor && val.constructor.name === \"ArrayBuffer\");\n}\n/** @private */\n\nexport function sendMessage(_x, _x2, _x3, _x4, _x5, _x6, _x7) {\n  return _sendMessage.apply(this, arguments);\n}\n/** @private */\n\nfunction _sendMessage() {\n  _sendMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(logger, transportName, httpClient, url, accessTokenFactory, content, options) {\n    var headers, token, _getUserAgentHeader, _getUserAgentHeader2, name, value, responseType, response;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            headers = {};\n\n            if (!accessTokenFactory) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 4;\n            return accessTokenFactory();\n\n          case 4:\n            token = _context.sent;\n\n            if (token) {\n              headers = _defineProperty({}, \"Authorization\", \"Bearer \".concat(token));\n            }\n\n          case 6:\n            _getUserAgentHeader = getUserAgentHeader(), _getUserAgentHeader2 = _slicedToArray(_getUserAgentHeader, 2), name = _getUserAgentHeader2[0], value = _getUserAgentHeader2[1];\n            headers[name] = value;\n            logger.log(LogLevel.Trace, \"(\".concat(transportName, \" transport) sending data. \").concat(getDataDetail(content, options.logMessageContent), \".\"));\n            responseType = isArrayBuffer(content) ? \"arraybuffer\" : \"text\";\n            _context.next = 12;\n            return httpClient.post(url, {\n              content: content,\n              headers: _objectSpread(_objectSpread({}, headers), options.headers),\n              responseType: responseType,\n              timeout: options.timeout,\n              withCredentials: options.withCredentials\n            });\n\n          case 12:\n            response = _context.sent;\n            logger.log(LogLevel.Trace, \"(\".concat(transportName, \" transport) request complete. Response status: \").concat(response.statusCode, \".\"));\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _sendMessage.apply(this, arguments);\n}\n\nexport function createLogger(logger) {\n  if (logger === undefined) {\n    return new ConsoleLogger(LogLevel.Information);\n  }\n\n  if (logger === null) {\n    return NullLogger.instance;\n  }\n\n  if (logger.log !== undefined) {\n    return logger;\n  }\n\n  return new ConsoleLogger(logger);\n}\n/** @private */\n\nexport var SubjectSubscription = /*#__PURE__*/function () {\n  function SubjectSubscription(subject, observer) {\n    _classCallCheck(this, SubjectSubscription);\n\n    this._subject = subject;\n    this._observer = observer;\n  }\n\n  _createClass(SubjectSubscription, [{\n    key: \"dispose\",\n    value: function dispose() {\n      var index = this._subject.observers.indexOf(this._observer);\n\n      if (index > -1) {\n        this._subject.observers.splice(index, 1);\n      }\n\n      if (this._subject.observers.length === 0 && this._subject.cancelCallback) {\n        this._subject.cancelCallback().catch(function (_) {});\n      }\n    }\n  }]);\n\n  return SubjectSubscription;\n}();\n/** @private */\n\nexport var ConsoleLogger = /*#__PURE__*/function () {\n  function ConsoleLogger(minimumLogLevel) {\n    _classCallCheck(this, ConsoleLogger);\n\n    this._minLevel = minimumLogLevel;\n    this.out = console;\n  }\n\n  _createClass(ConsoleLogger, [{\n    key: \"log\",\n    value: function log(logLevel, message) {\n      if (logLevel >= this._minLevel) {\n        var msg = \"[\".concat(new Date().toISOString(), \"] \").concat(LogLevel[logLevel], \": \").concat(message);\n\n        switch (logLevel) {\n          case LogLevel.Critical:\n          case LogLevel.Error:\n            this.out.error(msg);\n            break;\n\n          case LogLevel.Warning:\n            this.out.warn(msg);\n            break;\n\n          case LogLevel.Information:\n            this.out.info(msg);\n            break;\n\n          default:\n            // console.debug only goes to attached debuggers in Node, so we use console.log for Trace and Debug\n            this.out.log(msg);\n            break;\n        }\n      }\n    }\n  }]);\n\n  return ConsoleLogger;\n}();\n/** @private */\n\nexport function getUserAgentHeader() {\n  var userAgentHeaderName = \"X-SignalR-User-Agent\";\n\n  if (Platform.isNode) {\n    userAgentHeaderName = \"User-Agent\";\n  }\n\n  return [userAgentHeaderName, constructUserAgent(VERSION, getOsName(), getRuntime(), getRuntimeVersion())];\n}\n/** @private */\n\nexport function constructUserAgent(version, os, runtime, runtimeVersion) {\n  // Microsoft SignalR/[Version] ([Detailed Version]; [Operating System]; [Runtime]; [Runtime Version])\n  var userAgent = \"Microsoft SignalR/\";\n  var majorAndMinor = version.split(\".\");\n  userAgent += \"\".concat(majorAndMinor[0], \".\").concat(majorAndMinor[1]);\n  userAgent += \" (\".concat(version, \"; \");\n\n  if (os && os !== \"\") {\n    userAgent += \"\".concat(os, \"; \");\n  } else {\n    userAgent += \"Unknown OS; \";\n  }\n\n  userAgent += \"\".concat(runtime);\n\n  if (runtimeVersion) {\n    userAgent += \"; \".concat(runtimeVersion);\n  } else {\n    userAgent += \"; Unknown Runtime Version\";\n  }\n\n  userAgent += \")\";\n  return userAgent;\n} // eslint-disable-next-line spaced-comment\n\n/*#__PURE__*/\n\nfunction getOsName() {\n  if (Platform.isNode) {\n    switch (process.platform) {\n      case \"win32\":\n        return \"Windows NT\";\n\n      case \"darwin\":\n        return \"macOS\";\n\n      case \"linux\":\n        return \"Linux\";\n\n      default:\n        return process.platform;\n    }\n  } else {\n    return \"\";\n  }\n} // eslint-disable-next-line spaced-comment\n\n/*#__PURE__*/\n\n\nfunction getRuntimeVersion() {\n  if (Platform.isNode) {\n    return process.versions.node;\n  }\n\n  return undefined;\n}\n\nfunction getRuntime() {\n  if (Platform.isNode) {\n    return \"NodeJS\";\n  } else {\n    return \"Browser\";\n  }\n}\n/** @private */\n\n\nexport function getErrorString(e) {\n  if (e.stack) {\n    return e.stack;\n  } else if (e.message) {\n    return e.message;\n  }\n\n  return \"\".concat(e);\n}\n/** @private */\n\nexport function getGlobalThis() {\n  // globalThis is semi-new and not available in Node until v12\n  if (typeof globalThis !== \"undefined\") {\n    return globalThis;\n  }\n\n  if (typeof self !== \"undefined\") {\n    return self;\n  }\n\n  if (typeof window !== \"undefined\") {\n    return window;\n  }\n\n  if (typeof global !== \"undefined\") {\n    return global;\n  }\n\n  throw new Error(\"could not find global\");\n} //# sourceMappingURL=Utils.js.map","map":null,"metadata":{},"sourceType":"module"}